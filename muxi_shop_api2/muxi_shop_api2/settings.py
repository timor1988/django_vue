"""
Django settings for muxi_shop_api2 project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# 把apps，加入到项目根的搜索路径，导入的时候，可以直接从源码包中导入
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*h+kgaf*eez*842i2&fzs_#dumaff0*$-wp_(_rn!ni-e_5axc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "cart",
    "comment",
    "goods",
    "order",
    "user",
    "menu",
    "address",
    'rest_framework',
    'corsheaders',
]
# 解决跨域的一个插件
# pip install django-cors-headers
# 允许所有域名跨域
CORS_ORIGIN_ALLOW_ALL=True
# 允许携带cookie
CORS_ALLOW_CREDENTIALS=True


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'muxi_shop_api2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'muxi_shop_api2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# 如果安装mysqlclient报错了，缺少****包
# 我们就需要到 https://www.lfd.uci.edu/~gohlke/pythonlibs/ 上找到对应的包进行下载
# 下载成功后 pip install 包名，安装完之后，再进行pip install mysqlclient

# DATABASES = {
#     'default': {
#         # 'ENGINE': 'django.db.backends.sqlite3',
#         # 'NAME': BASE_DIR / 'db.sqlite3',
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'muxi_shop',
#         'USER': 'admin1',
#         'PASSWORD': '123',
#         'HOST': '192.168.1.129'
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# 这个是图片的访问路径
# 我们的图片访问路径是：http://localhost:8000/static/product_images/268357.jpg
STATIC_URL = 'static/'
# 需要配置一下我们的文件所在路径（文件夹）
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 静态文件服务器配置
# IMAGE_URL = "http://localhost:8000/static/product_images/"

# 全局的token验证配置
REST_FRAMEWORK = {
    # "DEFAULT_AUTHENTICATION_CLASSES":['utils.jwt_auth.JwtQueryParamAuthentication']
    "DEFAULT_AUTHENTICATION_CLASSES":['utils.jwt_auth.JwtHeaderAuthentication']
}

# 支付宝沙箱环境配置
APPID="2021000121675750"
ALI_PUB_KEY_PATH=os.path.join(BASE_DIR,"apps/pay/keys/alipay_key.txt")
PRIVATE_KEY_PATH=os.path.join(BASE_DIR,"apps/pay/keys/private_key.txt")
# 异步接收rul  post请求
# APP_NOTIFY_URL="http://127.0.0.1:8000/pay/alipay/return"
# 同步接收url，就是用户在页面上支付成功之后，然后就跳转的页面  get请求
# RETURN_URL="http://127.0.0.1:8000/pay/alipay/return"
# 是否是开发环境
ALIPAY_DEBUG=True

"""
http://127.0.0.1:8000/alipay/return?
charset=utf-8&out_trade_no=123&
method=alipay.trade.page.pay.return&
total_amount=1.00&
sign=DQ8nAUEZY%2FO74BfSpwAWllD3GqCZSSKlNUXT7cHOdzwmj%2FcC0P6edBkSFq%2F9QYFCje3er5NDRhF8LDJd4VIgGqv1UilHr1phCUNWwQLl%2BByum%2F9BZx4471eV6U8F4JFUy7wsbVh%2BWAN22i8WqKpqEi21Tno0QMfpIFzdIiw%2B9SfDq7rq%2FUPOlYZKYlYIWBVLn4UE3dHltSRurUUhw9%2FQv%2BDBMyV4XCubbxISDRzdaPxgcX1blUl82CWlOe%2FPBzSgspQSSSSKTmciwG4jIMxznUq22go1vQ5V%2BVTNRtMOrzXxHvd6tfCvWgv4cyE73%2BRcSkoYNvNFk7NtlBQ3m8r%2Buw%3D%3D&
trade_no=2023060122001438330501983230&
auth_app_id=2021000121675750&
version=1.0&
app_id=2021000121675750&
sign_type=RSA2&seller_id=2088621993710705&
timestamp=2023-06-01+15%3A08%3A13


"""

# 做环境区分的代码
CURRENT_ENV = "dev"
# 如果这样写，你需要在你的运行环境中，设置一个环境变量CURRENT_ENV，并把它的值对应设置成dev或者是test,或者是prod
# CURRENT_ENV = os.getenv("CURRENT_ENV","dev")
if CURRENT_ENV == "dev":
    from .settings_dev import *
elif CURRENT_ENV == "test":
    from .settings_test import *
elif CURRENT_ENV == "prod":
    from .settings_prod import *


